import os
import logging
import re
import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from telegram.error import Conflict, RetryAfter
import requests
from bs4 import BeautifulSoup

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
if not BOT_TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    exit(1)

# –ö–ª—é—á–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
AUTOSTART, CONTROL, GPS, PHONE = range(4)
user_data = {}

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
PRODUCTS_DATA = [
    {'name': 'Pandora DX-40R', 'autostart': 0, 'remote': 1, 'gsm': 0, 'gps': 0,
     'link': 'https://ya7auto.ru/auto-security/car-alarms/pandora-dx-40r/'},
    {'name': 'Pandora DX-40RS', 'autostart': 1, 'remote': 1, 'gsm': 0, 'gps': 0,
     'link': 'https://ya7auto.ru/auto-security/car-alarms/pandora-dx-40rs/'},
    {'name': 'PanDECT X-1800L v4 Light', 'autostart': 1, 'remote': 0, 'gsm': 1, 'gps': 0,
     'link': 'https://ya7auto.ru/auto-security/car-alarms/pandect-x-1800l-v4-light/'},
    {'name': 'Pandora VX 4G Light', 'autostart': 1, 'remote': 0, 'gsm': 1, 'gps': 0,
     'link': 'https://ya7auto.ru/auto-security/car-alarms/pandora-vx-4g-light/'},
    {'name': 'Pandora VX-4G GPS v2', 'autostart': 1, 'remote': 0, 'gsm': 1, 'gps': 1,
     'link': 'https://ya7auto.ru/auto-security/car-alarms/pandora-vx-4g-gps-v2/'},
    {'name': 'Pandora VX 3100', 'autostart': 1, 'remote': 1, 'gsm': 1, 'gps': 1,
     'link': 'https://ya7auto.ru/auto-security/car-alarms/pandora-vx-3100/'},
    {'name': 'StarLine A63 v2 ECO', 'autostart': 0, 'remote': 1, 'gsm': 0, 'gps': 0,
     'link': 'https://ya7auto.ru/auto-security/car-alarms/starline-a63-v2-eco/'},
    {'name': 'StarLine –ê93 v2 ECO', 'autostart': 1, 'remote': 1, 'gsm': 0, 'gps': 0,
     'link': 'https://ya7auto.ru/auto-security/car-alarms/starline-a93-v2-eco/'},
    {'name': 'StarLine S96 v2 ECO', 'autostart': 1, 'remote': 0, 'gsm': 1, 'gps': 0,
     'link': 'https://ya7auto.ru/auto-security/car-alarms/starline-s96-v2-eco/'},
    {'name': 'StarLine S96 V2 LTE GPS', 'autostart': 1, 'remote': 0, 'gsm': 1, 'gps': 1,
     'link': 'https://ya7auto.ru/auto-security/car-alarms/starline-s96-v2-lte-gps/'}
]


def send_to_crm(phone_number):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ CRM"""
    url = "https://ya7auto.ru/crm/form/iframe/3/"

    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Content-Type': 'application/x-www-form-urlencoded',
    }

    form_data = {
        'phone': phone_number,
        'form_id': '3',
        'utm_source': 'telegram_bot',
        'utm_medium': 'bot'
    }

    try:
        response = requests.post(url, data=form_data, headers=headers, timeout=10)
        logger.info(f"CRM –æ—Ç–≤–µ—Ç: {response.status_code}")

        if response.status_code == 200:
            logger.info(f"‚úÖ –ù–æ–º–µ—Ä {phone_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ CRM")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ CRM: {response.status_code}")
            return False

    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False


def validate_phone_number(phone):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    digits = re.sub(r'\D', '', str(phone))

    if len(digits) == 11:
        if digits.startswith('7'):
            return f"+7{digits[1:]}"
        elif digits.startswith('8'):
            return f"+7{digits[1:]}"
    elif len(digits) == 10:
        return f"+7{digits}"

    return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å"""
    user = update.message.from_user
    await update.message.reply_text(
        f"üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {user.first_name}!\n\n"
        "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ç–≤–æ–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è!\n\n"
        "–ö–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞—Å –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ?",
        reply_markup=ReplyKeyboardMarkup(
            [["–° –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º", "–ë–ï–ó –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"]],
            one_time_keyboard=True,
            resize_keyboard=True
        ),
    )
    return AUTOSTART


async def autostart_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"""
    choice = update.message.text
    user_id = update.message.from_user.id
    user_data[user_id] = {'autostart': 1 if choice == '–° –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º' else 0}

    await update.message.reply_text(
        "üì° –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º —Å–ø–æ—Å–æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
        "–ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–æ–π?",
        reply_markup=ReplyKeyboardMarkup(
            [["üòé –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ", "üì∫ –ë—Ä–µ–ª–æ–∫"]],
            one_time_keyboard=True,
            resize_keyboard=True
        ),
    )
    return CONTROL


async def control_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    choice = update.message.text
    user_id = update.message.from_user.id
    user_data[user_id]['control'] = 'app' if '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' in choice else 'remote'

    await update.message.reply_text(
        "–ù—É–∂–µ–Ω –ª–∏ –≤–∞–º GPS-–º–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?",
        reply_markup=ReplyKeyboardMarkup(
            [["–î–∞, –Ω—É–∂–µ–Ω GPS", "–ù–µ—Ç, –Ω–µ –Ω—É–∂–µ–Ω"]],
            one_time_keyboard=True,
            resize_keyboard=True
        ),
    )
    return GPS


async def gps_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä GPS –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    choice = update.message.text
    user_id = update.message.from_user.id
    user_data[user_id]['gps'] = 1 if '–î–∞' in choice else 0

    user_prefs = user_data[user_id]
    recommended_products = []

    for product in PRODUCTS_DATA:
        if user_prefs['autostart'] == 1 and product['autostart'] == 0:
            continue
        if user_prefs['control'] == 'app' and product['gsm'] == 0:
            continue
        if user_prefs['gps'] == 1 and product['gps'] == 0:
            continue

        recommended_products.append(product)
        if len(recommended_products) == 2:
            break

    if recommended_products:
        message_text = "–í–æ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤–∞—Å:\n\n"
        for prod in recommended_products:
            message_text += f"‚Ä¢ <a href='{prod['link']}'>{prod['name']}</a>\n"
        message_text += "\n–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
    else:
        message_text = "–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–º–æ–∂–µ—Ç —Å –ø–æ–¥–±–æ—Ä–æ–º:"

    await update.message.reply_text(message_text, parse_mode='HTML', disable_web_page_preview=True)

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)], ["–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä"]],
            one_time_keyboard=True,
            resize_keyboard=True
        ),
    )
    return PHONE


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone_number = None

    if update.message.contact:
        phone_number = validate_phone_number(update.message.contact.phone_number)
    elif update.message.text == "–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXX...")
        return PHONE
    elif update.message.text:
        phone_number = validate_phone_number(update.message.text)

    if not phone_number:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ +7XXX...")
        return PHONE

    await update.message.reply_text("‚åõ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—à –Ω–æ–º–µ—Ä...")

    success = send_to_crm(phone_number)

    if success:
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!\n\n"
            "–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
        )

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –æ–ø—Ä–æ—Å"""
    await update.message.reply_text(
        '–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start',
        reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
    )
    return ConversationHandler.END


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
    logger.error("–û—à–∏–±–∫–∞:", exc_info=context.error)


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ...")

    # –°–æ–∑–¥–∞–µ–º Application —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    application = Application.builder() \
        .token(BOT_TOKEN) \
        .read_timeout(30) \
        .write_timeout(30) \
        .connect_timeout(30) \
        .pool_timeout(30) \
        .build()

    application.add_error_handler(error_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            AUTOSTART: [MessageHandler(filters.Regex("^(–° –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º|–ë–ï–ó –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞)$"), autostart_choice)],
            CONTROL: [MessageHandler(filters.Regex("^(üòé –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ|üì∫ –ë—Ä–µ–ª–æ–∫)$"), control_choice)],
            GPS: [MessageHandler(filters.Regex("^(–î–∞, –Ω—É–∂–µ–Ω GPS|–ù–µ—Ç, –Ω–µ –Ω—É–∂–µ–Ω)$"), gps_choice)],
            PHONE: [
                MessageHandler(filters.CONTACT, get_phone),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")

    try:
        application.run_polling(
            drop_pending_updates=True,  # –í–∞–∂–Ω–æ: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            allowed_updates=Update.ALL_TYPES,
            close_loop=False
        )
    except Conflict as e:
        logger.error(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. {e}")
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        asyncio.run(asyncio.sleep(10))
        main()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == '__main__':
    main()